@page "/AsyncOp"
@using AsyncStream.Web.Data
@using AsyncStream.Core
@using System.Threading

@inject AsyncHttpClient _httpClient

@*<div class="row">
    <div class="col-md-2">
        <button class="btn btn-primary" @onclick="async () => await CancelDownloadAsync()">Cancel</button>
    </div>
</div>*@


@foreach (var author in Authors)
{
    <div class="row">
        <div class="col-md-1">
            @author.Id
        </div>
        <div class="col-md-2">
            @author.FirstName, @author.LastName
        </div>
    </div>
}


@code {

    List<Author> Authors = new List<Author>();

    CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();

    CancellationToken cancellationToken;

    protected override async Task OnInitializedAsync()
    {

        
        cancellationToken = cancellationTokenSource.Token;

        await foreach (var author in _httpClient.RetrieveAsync())
        {
            if (!cancellationToken.IsCancellationRequested)
            {
                Authors.Add(author);
                StateHasChanged();
            }
        }
    }

    private async Task CancelDownloadAsync()
    {
        cancellationTokenSource.Cancel();
    }



}

